import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class Testing {
    @Test
    public void sumArray() {
        String[] program = {
                "copy 5 r0",
                "copy 10 r1",
                "multiply r0 r1",
                "store 6 r1",
                "add 1 r1",
                "store 12 r1",
                "add 1 r1",
                "store 13 r1",
                "add 1 r1",
                "store 11 r1",
                "add 1 r1",
                "store 6 r1",
                "add 1 r1",
                "store 14 r1",
                "add 1 r1",
                "store 4 r1",
                "add 1 r1",
                "store 15 r1",
                "add 1 r1",
                "store 14 r1",
                "add 1 r1",
                "store 2 r1",
                "add 1 r1",
                "store 8 r1",
                "add 1 r1",
                "store 6 r1",
                "add 1 r1",
                "store 2 r1",
                "add 1 r1",
                "store 5 r1",
                "add 1 r1",
                "store 3 r1",
                "add 1 r1",
                "store 4 r1",
                "add 1 r1",
                "store 15 r1",
                "add 1 r1",
                "store 2 r1",
                "add 1 r1",
                "store 5 r1",
                "add 1 r1",
                "store 4 r1",
                "copy 10 r1",
                "multiply r0 r1",
                "copy 2 r0",
                "copy 10 r2",
                "multiply r0 r2",
                "copy 0 r4",
                "load r1 r3",
                "add r3 r4",
                "add 1 r1",
                "subtract 1 r2",
                "compare 0 r2",
                "bne -2",
                "store r4 r1",
                "syscall 1",
                "halt"
        };
        var p = runProgram(program);
        assertEquals("70:f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,t,f,f,t,f,t,t,t,",p.output.get(70));
    }

    @Test
    public void sumLinkedList() {
        String[] program = {
                "copy 10 r0",
                "copy 10 r1",
                "multiply r0 r1",
                "copy r1 r2",
                "store 6 r1",
                "add 1 r1",
                "add 8 r2",
                "store r2 r1",
                "copy r2 r1",
                "store 12 r1",
                "add 1 r1",
                "add 8 r2",
                "store r2 r1",
                "copy r2 r1",
                "store 13 r1",
                "add 1 r1",
                "add 8 r2",
                "store r2 r1",
                "copy r2 r1",
                "store 11 r1",
                "add 1 r1",
                "add 8 r2",
                "store r2 r1",
                "copy r2 r1",
                "store 6 r1",
                "add 1 r1",
                "add 8 r2",
                "store r2 r1",
                "copy r2 r1",
                "store 14 r1",
                "add 1 r1",
                "add 8 r2",
                "store r2 r1",
                "copy r2 r1",
                "store 4 r1",
                "add 1 r1",
                "add 8 r2",
                "store r2 r1",
                "copy r2 r1",
                "store 15 r1",
                "add 1 r1",
                "add 8 r2",
                "store r2 r1",
                "copy r2 r1",
                "store 14 r1",
                "add 1 r1",
                "add 8 r2",
                "store r2 r1",
                "copy r2 r1",
                "store 2 r1",
                "add 1 r1",
                "add 8 r2",
                "store r2 r1",
                "copy r2 r1",
                "store 8 r1",
                "add 1 r1",
                "add 8 r2",
                "store r2 r1",
                "copy r2 r1",
                "store 6 r1",
                "add 1 r1",
                "add 8 r2",
                "store r2 r1",
                "copy r2 r1",
                "store 2 r1",
                "add 1 r1",
                "add 8 r2",
                "store r2 r1",
                "copy r2 r1",
                "store 5 r1",
                "add 1 r1",
                "add 8 r2",
                "store r2 r1",
                "copy r2 r1",
                "store 3 r1",
                "add 1 r1",
                "add 8 r2",
                "store r2 r1",
                "copy r2 r1",
                "store 4 r1",
                "add 1 r1",
                "add 8 r2",
                "store r2 r1",
                "copy r2 r1",
                "store 15 r1",
                "add 1 r1",
                "add 8 r2",
                "store r2 r1",
                "copy r2 r1",
                "store 2 r1",
                "add 1 r1",
                "add 8 r2",
                "store r2 r1",
                "copy r2 r1",
                "store 5 r1",
                "add 1 r1",
                "add 8 r2",
                "store r2 r1",
                "copy r2 r1",
                "store 4 r1",
                "add 1 r1",
                "add 8 r2",
                "store r2 r1",
                "copy 10 r1",
                "multiply r0 r1",
                "copy 2 r0",
                "copy 10 r2",
                "multiply r0 r2",
                "load r1 r3",
                "add r3 r4",
                "add 1 r1",
                "load r1 r1",
                "subtract 1 r2",
                "copy 0 r5",
                "compare 0 r2",
                "bne -3",
                "store r4 r1",
                "syscall 1",
                "halt"
        };
        var p = runProgram(program);
        assertEquals("260:f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,t,f,f,t,f,t,t,t,",p.output.get(260));
    }

    @Test
    public void sumArrayBackwards() {
        String[] program = {
                "copy 5 r0",
                "copy 10 r1",
                "multiply r0 r1",
                "store 6 r1",
                "add 1 r1",
                "store 12 r1",
                "add 1 r1",
                "store 13 r1",
                "add 1 r1",
                "store 11 r1",
                "add 1 r1",
                "store 6 r1",
                "add 1 r1",
                "store 14 r1",
                "add 1 r1",
                "store 4 r1",
                "add 1 r1",
                "store 15 r1",
                "add 1 r1",
                "store 14 r1",
                "add 1 r1",
                "store 2 r1",
                "add 1 r1",
                "store 8 r1",
                "add 1 r1",
                "store 6 r1",
                "add 1 r1",
                "store 2 r1",
                "add 1 r1",
                "store 5 r1",
                "add 1 r1",
                "store 3 r1",
                "add 1 r1",
                "store 4 r1",
                "add 1 r1",
                "store 15 r1",
                "add 1 r1",
                "store 2 r1",
                "add 1 r1",
                "store 5 r1",
                "add 1 r1",
                "store 4 r1",
                "copy 2 r0",
                "copy 10 r2",
                "multiply r0 r2",
                "copy 0 r4",
                "load r1 r3",
                "add r3 r4",
                "subtract 1 r1",
                "subtract 1 r2",
                "compare 0 r2",
                "bne -2",
                "store r4 r1",
                "syscall 1",
                "halt"
        };
        var p = runProgram(program);
        assertEquals("49:f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,t,f,f,t,f,t,t,t,",p.output.get(49));
    }

    private static Processor runProgram(String[] program) {
        var assembled = Assembler.assemble(program);
        var merged = Assembler.finalOutput(assembled);
        var m = new Memory();
        m.load(merged);
        var p = new Processor(m);
        p.run();
        return p;
    }
}
